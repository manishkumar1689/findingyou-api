import { zeroPad } from "../../lib/converters";
import { SynastryAspectMatch } from "./interfaces";

const synastryAspectKeys = [
  "as_000_as",
  "as_030_as",
  "as_060_as",
  "as_090_as",
  "as_120_as",
  "as_150_as",
  "as_180_as",
  "as_000_su",
  "as_000_mo",
  "as_000_me",
  "as_000_ve",
  "as_000_ma",
  "as_000_ju",
  "as_000_sa",
  "as_000_ur",
  "as_000_ne",
  "as_000_pl",
  "as_090_su",
  "as_090_mo",
  "as_090_me",
  "as_090_ve",
  "as_090_ma",
  "as_090_ju",
  "as_090_sa",
  "as_090_ur",
  "as_090_ne",
  "as_090_pl",
  "as_120_su",
  "as_120_mo",
  "as_120_ju",
  "as_120_me",
  "as_120_ma",
  "as_120_ve",
  "as_120_sa",
  "as_120_ur",
  "as_120_ne",
  "as_120_pl",
  "as_180_su",
  "as_180_mo",
  "as_180_me",
  "as_180_ve",
  "as_180_ma",
  "as_180_ju",
  "as_180_sa",
  "as_180_ur",
  "as_180_ne",
  "as_180_pl",
  "su_000_su",
  "mo_000_mo",
  "me_000_me",
  "ve_000_ve",
  "ma_000_ma",
  "su_090_su",
  "su_120_su",
  "su_180_su",
  "su_000_mo",
  "su_000_me",
  "su_000_ve",
  "su_000_ma",
  "su_000_ju",
  "su_000_sa",
  "su_000_ur",
  "su_000_ne",
  "su_000_pl",
  "su_120_mo",
  "su_120_me",
  "su_120_ve",
  "su_120_ma",
  "su_120_ju",
  "su_120_sa",
  "su_120_ur",
  "su_120_ne",
  "su_120_pl",
  "su_180_mo",
  "su_180_me",
  "su_180_ma",
  "su_180_ve",
  "su_180_ju",
  "su_180_sa",
  "su_180_ur",
  "su_180_ne",
  "su_180_pl",
  "ma_180_ma",
  "ma_090_ma",
  "ma_120_ma",
  "ma_000_ju",
  "ma_000_sa",
  "ma_000_ur",
  "ma_000_ne",
  "ma_000_pl",
  "ma_090_ju",
  "ma_090_sa",
  "ma_090_ur",
  "ma_090_ne",
  "ma_090_pl",
  "ma_120_ju",
  "ma_120_sa",
  "ma_120_ur",
  "ma_120_ne",
  "ma_120_pl",
  "ma_180_ju",
  "ma_180_sa",
  "ma_180_ur",
  "ma_180_ne",
  "ma_180_pl",
  "mo_090_mo",
  "mo_120_mo",
  "mo_180_mo",
  "me_090_me",
  "me_120_me",
  "me_180_me",
  "ve_090_ve",
  "ve_120_ve",
  "ve_180_ve",
  "ve_180_ma",
  "ve_180_ju",
  "ve_180_sa",
  "ve_180_ur",
  "ve_180_ne",
  "ve_180_pl",
  "ve_120_ma",
  "ve_120_ju",
  "ve_120_sa",
  "ve_120_ur",
  "ve_120_ne",
  "ve_120_pl",
  "ve_090_ma",
  "ve_090_ju",
  "ve_090_sa",
  "ve_090_ur",
  "ve_090_ne",
  "ve_090_pl",
  "ve_000_ma",
  "ve_000_ju",
  "ve_000_sa",
  "ve_000_ur",
  "ve_000_ne",
  "ve_000_pl",
  "mo_180_me",
  "mo_180_ve",
  "mo_180_ma",
  "mo_180_ju",
  "mo_180_sa",
  "mo_180_ur",
  "mo_180_ne",
  "mo_180_pl",
  "mo_120_me",
  "mo_120_ma",
  "mo_120_ve",
  "mo_120_ju",
  "mo_120_sa",
  "mo_120_ur",
  "mo_120_ne",
  "mo_120_pl",
  "mo_090_me",
  "mo_090_ma",
  "mo_090_ve",
  "mo_090_ne",
  "mo_090_ju",
  "mo_090_sa",
  "mo_090_ur",
  "mo_090_pl",
  "mo_000_me",
  "mo_000_ma",
  "mo_000_ne",
  "mo_000_ve",
  "mo_000_ju",
  "mo_000_sa",
  "mo_000_ur",
  "mo_000_pl",
  "me_180_ve",
  "me_180_ne",
  "me_180_ma",
  "me_180_ju",
  "me_180_sa",
  "me_180_ur",
  "me_180_pl",
  "me_120_ma",
  "me_120_ju",
  "me_120_ve",
  "me_120_sa",
  "me_120_ne",
  "me_120_ur",
  "me_120_pl",
  "me_090_ma",
  "me_090_ve",
  "me_090_sa",
  "me_090_ne",
  "me_090_ju",
  "me_090_ur",
  "me_090_pl",
  "me_000_ma",
  "me_000_ve",
  "me_000_sa",
  "me_000_ne",
  "me_000_ju",
  "me_000_ur",
  "me_000_pl",
  "su_090_mo",
  "su_090_me",
  "su_090_ma",
  "su_090_ve",
  "su_090_ju",
  "su_090_sa",
  "su_090_ur",
  "su_090_ne",
  "su_090_pl"
]

export const matchSynastrySnippetKey = (k1: string, k2: string, deg = 0) => {
  const degKey = zeroPad(deg, 3);
  let key = [k1, degKey, k2].join('_');
  let first = true;
  let keyIndex = synastryAspectKeys.indexOf(key);
  if (keyIndex < 0 ) {
    key = [k2, degKey, k1].join('_');
    keyIndex = synastryAspectKeys.indexOf(key);
    first = keyIndex < 0;
  }
  const matched = keyIndex >= 0;
  return { 
    key: matched? key : "",
    first,
    matched
  };
}

export const addSnippetKeyToSynastryAspectMatches = (aspects: SynastryAspectMatch[] = [], ak1Name = 'p1', ak2Name = 'p2' ): SynastryAspectMatch[] => {
  return aspects.map(asp => {
    const snip = matchSynastrySnippetKey(asp.k1, asp.k2, asp.deg);
    const { key, first } = snip;
    const ak1 = first? ak1Name : ak2Name;
    const ak2 = first? ak2Name : ak1Name;
    return { ...asp, key, ak1, ak2, first: first? 1 : 2 };
  })
}